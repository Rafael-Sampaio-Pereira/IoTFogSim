
from twisted.internet import protocol, reactor, endpoints
from twisted.python import log
from config.settings import ICONS_PATH
from core.visualcomponent import VisualComponent
from twisted.internet.endpoints import TCP4ClientEndpoint
from twisted.internet.endpoints import connectProtocol
from core.iconsRegister import getIconFileName
from core.functions import import_and_instantiate_class_from_string
from fabric.api import local
from bresenham import bresenham


# |||||||||||||||||||||||||| MOBILE NETWORK ||||||||||||||||||||||||||


class MobileDevice(object):
    def __init__(self):
        pass

    def find_nearby_devices_icon(self):
        # getting all canvas objects in wireless signal coverage area - Rafael Sampaio
        all_coveraged_devices = self.simulation_core.canvas.find_overlapping(
            self.visual_component.x+self.coverage_area_radius,
            self.visual_component.y+self.coverage_area_radius,
            self.visual_component.x-self.coverage_area_radius,
            self.visual_component.y-self.coverage_area_radius)
        return all_coveraged_devices

    def get_nearby_devices_list(self):
        all_nearby_device = set()
        # putting all nearby devices icons in a list that will be use in future to send data across - Rafael Sampaio
        nearby_devices_icon_list = self.find_nearby_devices_icon()

        for icon_id in nearby_devices_icon_list:
            device = self.mobile_network_group.get_mobile_network_device_by_icon(
                icon_id)

            if device != None:
                all_nearby_device.add(device)

        return all_nearby_device


class MobileNetwork(object):

    def __init__(self, simulation_core, wireless_standard, network_layer_protocol, application_layer_protocol, latency):
        self.simulation_core = simulation_core
        self.base_station_list = set()
        self.mobile_repeater_list = set()
        self.mobile_producer_list = set()
        self.network_layer_protocol = network_layer_protocol
        self.application_layer_protocol = application_layer_protocol
        self.wireless_standard = wireless_standard
        self.latency = latency

    # By using this function user can find any device into the mobile network using the if of the draggable image incon.
    # This id is generated by the tkinter canvas. - Rafael Sampaio
    def get_mobile_network_device_by_icon(self, icon_id):
        try:
            founded_device = None

            for device in self.mobile_producer_list:
                if device.visual_component.draggable_img == icon_id:
                    founded_device = device

            for device in self.base_station_list:
                if device.visual_component.draggable_img == icon_id:
                    founded_device = device

            for device in self.mobile_repeater_list:
                if device.visual_component.draggable_img == icon_id:
                    founded_device = device

            if founded_device != None:
                return founded_device

        except Exception as e:
            pass


class MobileNode(MobileDevice):

    def __init__(self, simulation_core, id, name, icon, is_wireless, x, y, application, coverage_area_radius, mobile_network_group):

        self.application = import_and_instantiate_class_from_string(
            application)
        self.mobile_network_group = mobile_network_group
        self.is_wireless = is_wireless
        self.coverage_area_radius = coverage_area_radius

        icon_file = getIconFileName(icon)
        self.icon = ICONS_PATH+icon_file

        self.name = name+'_'+str(id)
        self.simulation_core = simulation_core

        self.is_wireless = is_wireless
        self.visual_component = VisualComponent(
            self.is_wireless, self.simulation_core, self.name, self.icon, x, y, coverage_area_radius, self)
        self.simulation_core.updateEventsCounter("Initializing mobile node")
        self.application.visual_component = self.visual_component
        self.application.visual_component.coverage_area_radius = coverage_area_radius
        self.application.simulation_core = self.simulation_core
        self.application.coverage_area_radius = coverage_area_radius

        if(self.is_wireless == True):
            # setting image tag as "wifi_device" it will be useful when we need to verify if one device under wireless signal can connect to that. - Rafael Sampaio
            self.simulation_core.canvas.itemconfig(
                self.visual_component.draggable_img, tags=("wifi_device",))

    def run(self):
        nearby_devices_list = self.get_nearby_devices_list()
        self.application.start(nearby_devices_list)


class BaseStationNode(MobileDevice):

    def __init__(self, simulation_core, id, name, icon, is_wireless, x, y, application, coverage_area_radius, mobile_network_group):

        self.application = import_and_instantiate_class_from_string(
            application)
        self.mobile_network_group = mobile_network_group
        self.is_wireless = is_wireless
        self.coverage_area_radius = coverage_area_radius

        icon_file = getIconFileName(icon)
        self.icon = ICONS_PATH+icon_file

        self.name = name
        self.id = id
        self.simulation_core = simulation_core

        self.is_wireless = is_wireless
        self.visual_component = VisualComponent(
            self.is_wireless, self.simulation_core, self.name, self.icon, x, y, coverage_area_radius, self)
        self.simulation_core.updateEventsCounter(
            "Initializing mobile network base station node")
        self.application.visual_component = self.visual_component
        self.application.simulation_core = self.simulation_core

        if(self.is_wireless == True):
            # setting image tag as "wifi_device" it will be useful when we need to verify if one device under wireless signal can connect to that. - Rafael Sampaio
            self.simulation_core.canvas.itemconfig(
                self.visual_component.draggable_img, tags=("wifi_device",))

    def run(self):
        nearby_devices_list = self.get_nearby_devices_list()
        self.application.start(nearby_devices_list)

# |||||||||||||||||||||||||| END MOBILE NETWORK ||||||||||||||||||||||||||
